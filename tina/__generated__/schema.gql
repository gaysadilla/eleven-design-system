# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  section(relativePath: String): Section!
  sectionConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: SectionFilter): SectionConnection!
  componentGroup(relativePath: String): ComponentGroup!
  componentGroupConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ComponentGroupFilter): ComponentGroupConnection!
  category(relativePath: String): Category!
  categoryConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: CategoryFilter): CategoryConnection!
  page(relativePath: String): Page!
  pageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PageFilter): PageConnection!
  navigation(relativePath: String): Navigation!
  navigationConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: NavigationFilter): NavigationConnection!
}

input DocumentFilter {
  section: SectionFilter
  componentGroup: ComponentGroupFilter
  category: CategoryFilter
  page: PageFilter
  navigation: NavigationFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Section | ComponentGroup | Category | Page | Navigation | Folder

type SectionLandingPageTabs {
  title: String!
  slug: String!
  content: JSON
}

type SectionLandingPage {
  overview: JSON
  tabs: [SectionLandingPageTabs]
}

type Section implements Node & Document {
  title: String!
  slug: String!
  description: String
  order: Float
  enabled: Boolean!
  icon: String
  hasLandingPage: Boolean
  landingPage: SectionLandingPage
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input NumberFilter {
  lt: Float
  lte: Float
  gte: Float
  gt: Float
  eq: Float
  exists: Boolean
  in: [Float]
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input SectionLandingPageTabsFilter {
  title: StringFilter
  slug: StringFilter
  content: RichTextFilter
}

input SectionLandingPageFilter {
  overview: RichTextFilter
  tabs: SectionLandingPageTabsFilter
}

input SectionFilter {
  title: StringFilter
  slug: StringFilter
  description: StringFilter
  order: NumberFilter
  enabled: BooleanFilter
  icon: StringFilter
  hasLandingPage: BooleanFilter
  landingPage: SectionLandingPageFilter
}

type SectionConnectionEdges {
  cursor: String!
  node: Section
}

type SectionConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [SectionConnectionEdges]
}

type ComponentGroup implements Node & Document {
  title: String!
  slug: String!
  description: String
  order: Float
  enabled: Boolean!
  icon: String
  content: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ComponentGroupFilter {
  title: StringFilter
  slug: StringFilter
  description: StringFilter
  order: NumberFilter
  enabled: BooleanFilter
  icon: StringFilter
  content: RichTextFilter
}

type ComponentGroupConnectionEdges {
  cursor: String!
  node: ComponentGroup
}

type ComponentGroupConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ComponentGroupConnectionEdges]
}

union CategorySection = Section

union CategoryComponentGroup = ComponentGroup

type Category implements Node & Document {
  title: String!
  slug: String!
  section: CategorySection!
  componentGroup: CategoryComponentGroup
  description: String
  order: Float
  enabled: Boolean!
  icon: String
  isExpandable: Boolean
  hasLandingPage: Boolean
  landingContent: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input CategorySectionFilter {
  section: SectionFilter
}

input CategoryComponentGroupFilter {
  componentGroup: ComponentGroupFilter
}

input CategoryFilter {
  title: StringFilter
  slug: StringFilter
  section: CategorySectionFilter
  componentGroup: CategoryComponentGroupFilter
  description: StringFilter
  order: NumberFilter
  enabled: BooleanFilter
  icon: StringFilter
  isExpandable: BooleanFilter
  hasLandingPage: BooleanFilter
  landingContent: RichTextFilter
}

type CategoryConnectionEdges {
  cursor: String!
  node: Category
}

type CategoryConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [CategoryConnectionEdges]
}

union PageSection = Section

union PageCategory = Category

union PageComponentGroup = ComponentGroup

type PageLinks {
  figmaUrl: String
  storybookUrl: String
  githubUrl: String
  npmUrl: String
}

type PagePackageInfo {
  packageName: String
  importPath: String
  dependencies: String
}

type PageOverviewBlocksRichTextBlock {
  title: String
  content: JSON
}

type PageOverviewBlocksFigmaSyncBlock {
  title: String
  description: String
  figmaUrl: String
  componentName: String
  showInstructions: Boolean
}

type PageOverviewBlocksLiveExampleBlock {
  title: String
  description: String
  code: String
  language: String
  showPreview: Boolean
  copyable: Boolean
}

type PageOverviewBlocksComponentApiBlockProperties {
  name: String
  type: String
  default: String
  description: String
  required: Boolean
}

type PageOverviewBlocksComponentApiBlock {
  title: String
  properties: [PageOverviewBlocksComponentApiBlockProperties]
}

type PageOverviewBlocksDesignSpecsBlockMeasurements {
  minHeight: String
  padding: String
  margin: String
  borderRadius: String
}

type PageOverviewBlocksDesignSpecsBlockTokens {
  name: String
  value: String
  description: String
}

type PageOverviewBlocksDesignSpecsBlock {
  title: String
  measurements: PageOverviewBlocksDesignSpecsBlockMeasurements
  tokens: [PageOverviewBlocksDesignSpecsBlockTokens]
}

type PageOverviewBlocksGuidelinesBlockDos {
  text: String
  example: String
}

type PageOverviewBlocksGuidelinesBlockDonts {
  text: String
  example: String
}

type PageOverviewBlocksGuidelinesBlock {
  title: String
  dos: [PageOverviewBlocksGuidelinesBlockDos]
  donts: [PageOverviewBlocksGuidelinesBlockDonts]
}

type PageOverviewBlocksCalloutBlock {
  type: String
  title: String
  content: JSON
}

union PageOverviewBlocks = PageOverviewBlocksRichTextBlock | PageOverviewBlocksFigmaSyncBlock | PageOverviewBlocksLiveExampleBlock | PageOverviewBlocksComponentApiBlock | PageOverviewBlocksDesignSpecsBlock | PageOverviewBlocksGuidelinesBlock | PageOverviewBlocksCalloutBlock

type PageOverview {
  blocks: [PageOverviewBlocks]
}

type PageSpecsBlocksRichTextBlock {
  title: String
  content: JSON
}

type PageSpecsBlocksFigmaSyncBlock {
  title: String
  description: String
  figmaUrl: String
  componentName: String
  showInstructions: Boolean
}

type PageSpecsBlocksLiveExampleBlock {
  title: String
  description: String
  code: String
  language: String
  showPreview: Boolean
  copyable: Boolean
}

type PageSpecsBlocksComponentApiBlockProperties {
  name: String
  type: String
  default: String
  description: String
  required: Boolean
}

type PageSpecsBlocksComponentApiBlock {
  title: String
  properties: [PageSpecsBlocksComponentApiBlockProperties]
}

type PageSpecsBlocksDesignSpecsBlockMeasurements {
  minHeight: String
  padding: String
  margin: String
  borderRadius: String
}

type PageSpecsBlocksDesignSpecsBlockTokens {
  name: String
  value: String
  description: String
}

type PageSpecsBlocksDesignSpecsBlock {
  title: String
  measurements: PageSpecsBlocksDesignSpecsBlockMeasurements
  tokens: [PageSpecsBlocksDesignSpecsBlockTokens]
}

type PageSpecsBlocksGuidelinesBlockDos {
  text: String
  example: String
}

type PageSpecsBlocksGuidelinesBlockDonts {
  text: String
  example: String
}

type PageSpecsBlocksGuidelinesBlock {
  title: String
  dos: [PageSpecsBlocksGuidelinesBlockDos]
  donts: [PageSpecsBlocksGuidelinesBlockDonts]
}

type PageSpecsBlocksCalloutBlock {
  type: String
  title: String
  content: JSON
}

union PageSpecsBlocks = PageSpecsBlocksRichTextBlock | PageSpecsBlocksFigmaSyncBlock | PageSpecsBlocksLiveExampleBlock | PageSpecsBlocksComponentApiBlock | PageSpecsBlocksDesignSpecsBlock | PageSpecsBlocksGuidelinesBlock | PageSpecsBlocksCalloutBlock

type PageSpecs {
  blocks: [PageSpecsBlocks]
}

type PageGuidelinesBlocksRichTextBlock {
  title: String
  content: JSON
}

type PageGuidelinesBlocksFigmaSyncBlock {
  title: String
  description: String
  figmaUrl: String
  componentName: String
  showInstructions: Boolean
}

type PageGuidelinesBlocksLiveExampleBlock {
  title: String
  description: String
  code: String
  language: String
  showPreview: Boolean
  copyable: Boolean
}

type PageGuidelinesBlocksComponentApiBlockProperties {
  name: String
  type: String
  default: String
  description: String
  required: Boolean
}

type PageGuidelinesBlocksComponentApiBlock {
  title: String
  properties: [PageGuidelinesBlocksComponentApiBlockProperties]
}

type PageGuidelinesBlocksDesignSpecsBlockMeasurements {
  minHeight: String
  padding: String
  margin: String
  borderRadius: String
}

type PageGuidelinesBlocksDesignSpecsBlockTokens {
  name: String
  value: String
  description: String
}

type PageGuidelinesBlocksDesignSpecsBlock {
  title: String
  measurements: PageGuidelinesBlocksDesignSpecsBlockMeasurements
  tokens: [PageGuidelinesBlocksDesignSpecsBlockTokens]
}

type PageGuidelinesBlocksGuidelinesBlockDos {
  text: String
  example: String
}

type PageGuidelinesBlocksGuidelinesBlockDonts {
  text: String
  example: String
}

type PageGuidelinesBlocksGuidelinesBlock {
  title: String
  dos: [PageGuidelinesBlocksGuidelinesBlockDos]
  donts: [PageGuidelinesBlocksGuidelinesBlockDonts]
}

type PageGuidelinesBlocksCalloutBlock {
  type: String
  title: String
  content: JSON
}

union PageGuidelinesBlocks = PageGuidelinesBlocksRichTextBlock | PageGuidelinesBlocksFigmaSyncBlock | PageGuidelinesBlocksLiveExampleBlock | PageGuidelinesBlocksComponentApiBlock | PageGuidelinesBlocksDesignSpecsBlock | PageGuidelinesBlocksGuidelinesBlock | PageGuidelinesBlocksCalloutBlock

type PageGuidelines {
  blocks: [PageGuidelinesBlocks]
}

type PageCodeInstallation {
  command: String
  instructions: JSON
}

type PageCodeCodeExamples {
  title: String
  language: String
  code: String
  description: String
}

type PageCodeApi {
  content: JSON
}

type PageCode {
  content: JSON
  installation: PageCodeInstallation
  codeExamples: [PageCodeCodeExamples]
  api: PageCodeApi
}

type PageSeo {
  metaTitle: String
  metaDescription: String
  keywords: String
}

type PageTableOfContents {
  enabled: Boolean
  maxDepth: Float
  minDepth: Float
  sticky: Boolean
}

type Page implements Node & Document {
  title: String!
  slug: String!
  section: PageSection!
  category: PageCategory
  componentGroup: PageComponentGroup
  description: String
  status: String
  version: String
  order: Float
  enabled: Boolean!
  cacheRefresh: String
  links: PageLinks
  packageInfo: PagePackageInfo
  overview: PageOverview
  specs: PageSpecs
  guidelines: PageGuidelines
  code: PageCode
  seo: PageSeo
  tableOfContents: PageTableOfContents
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input PageSectionFilter {
  section: SectionFilter
}

input PageCategoryFilter {
  category: CategoryFilter
}

input PageComponentGroupFilter {
  componentGroup: ComponentGroupFilter
}

input PageLinksFilter {
  figmaUrl: StringFilter
  storybookUrl: StringFilter
  githubUrl: StringFilter
  npmUrl: StringFilter
}

input PagePackageInfoFilter {
  packageName: StringFilter
  importPath: StringFilter
  dependencies: StringFilter
}

input PageOverviewBlocksRichTextBlockFilter {
  title: StringFilter
  content: RichTextFilter
}

input PageOverviewBlocksFigmaSyncBlockFilter {
  title: StringFilter
  description: StringFilter
  figmaUrl: StringFilter
  componentName: StringFilter
  showInstructions: BooleanFilter
}

input PageOverviewBlocksLiveExampleBlockFilter {
  title: StringFilter
  description: StringFilter
  code: StringFilter
  language: StringFilter
  showPreview: BooleanFilter
  copyable: BooleanFilter
}

input PageOverviewBlocksComponentApiBlockPropertiesFilter {
  name: StringFilter
  type: StringFilter
  default: StringFilter
  description: StringFilter
  required: BooleanFilter
}

input PageOverviewBlocksComponentApiBlockFilter {
  title: StringFilter
  properties: PageOverviewBlocksComponentApiBlockPropertiesFilter
}

input PageOverviewBlocksDesignSpecsBlockMeasurementsFilter {
  minHeight: StringFilter
  padding: StringFilter
  margin: StringFilter
  borderRadius: StringFilter
}

input PageOverviewBlocksDesignSpecsBlockTokensFilter {
  name: StringFilter
  value: StringFilter
  description: StringFilter
}

input PageOverviewBlocksDesignSpecsBlockFilter {
  title: StringFilter
  measurements: PageOverviewBlocksDesignSpecsBlockMeasurementsFilter
  tokens: PageOverviewBlocksDesignSpecsBlockTokensFilter
}

input PageOverviewBlocksGuidelinesBlockDosFilter {
  text: StringFilter
  example: StringFilter
}

input PageOverviewBlocksGuidelinesBlockDontsFilter {
  text: StringFilter
  example: StringFilter
}

input PageOverviewBlocksGuidelinesBlockFilter {
  title: StringFilter
  dos: PageOverviewBlocksGuidelinesBlockDosFilter
  donts: PageOverviewBlocksGuidelinesBlockDontsFilter
}

input PageOverviewBlocksCalloutBlockFilter {
  type: StringFilter
  title: StringFilter
  content: RichTextFilter
}

input PageOverviewBlocksFilter {
  RichTextBlock: PageOverviewBlocksRichTextBlockFilter
  FigmaSyncBlock: PageOverviewBlocksFigmaSyncBlockFilter
  LiveExampleBlock: PageOverviewBlocksLiveExampleBlockFilter
  ComponentApiBlock: PageOverviewBlocksComponentApiBlockFilter
  DesignSpecsBlock: PageOverviewBlocksDesignSpecsBlockFilter
  GuidelinesBlock: PageOverviewBlocksGuidelinesBlockFilter
  CalloutBlock: PageOverviewBlocksCalloutBlockFilter
}

input PageOverviewFilter {
  blocks: PageOverviewBlocksFilter
}

input PageSpecsBlocksRichTextBlockFilter {
  title: StringFilter
  content: RichTextFilter
}

input PageSpecsBlocksFigmaSyncBlockFilter {
  title: StringFilter
  description: StringFilter
  figmaUrl: StringFilter
  componentName: StringFilter
  showInstructions: BooleanFilter
}

input PageSpecsBlocksLiveExampleBlockFilter {
  title: StringFilter
  description: StringFilter
  code: StringFilter
  language: StringFilter
  showPreview: BooleanFilter
  copyable: BooleanFilter
}

input PageSpecsBlocksComponentApiBlockPropertiesFilter {
  name: StringFilter
  type: StringFilter
  default: StringFilter
  description: StringFilter
  required: BooleanFilter
}

input PageSpecsBlocksComponentApiBlockFilter {
  title: StringFilter
  properties: PageSpecsBlocksComponentApiBlockPropertiesFilter
}

input PageSpecsBlocksDesignSpecsBlockMeasurementsFilter {
  minHeight: StringFilter
  padding: StringFilter
  margin: StringFilter
  borderRadius: StringFilter
}

input PageSpecsBlocksDesignSpecsBlockTokensFilter {
  name: StringFilter
  value: StringFilter
  description: StringFilter
}

input PageSpecsBlocksDesignSpecsBlockFilter {
  title: StringFilter
  measurements: PageSpecsBlocksDesignSpecsBlockMeasurementsFilter
  tokens: PageSpecsBlocksDesignSpecsBlockTokensFilter
}

input PageSpecsBlocksGuidelinesBlockDosFilter {
  text: StringFilter
  example: StringFilter
}

input PageSpecsBlocksGuidelinesBlockDontsFilter {
  text: StringFilter
  example: StringFilter
}

input PageSpecsBlocksGuidelinesBlockFilter {
  title: StringFilter
  dos: PageSpecsBlocksGuidelinesBlockDosFilter
  donts: PageSpecsBlocksGuidelinesBlockDontsFilter
}

input PageSpecsBlocksCalloutBlockFilter {
  type: StringFilter
  title: StringFilter
  content: RichTextFilter
}

input PageSpecsBlocksFilter {
  RichTextBlock: PageSpecsBlocksRichTextBlockFilter
  FigmaSyncBlock: PageSpecsBlocksFigmaSyncBlockFilter
  LiveExampleBlock: PageSpecsBlocksLiveExampleBlockFilter
  ComponentApiBlock: PageSpecsBlocksComponentApiBlockFilter
  DesignSpecsBlock: PageSpecsBlocksDesignSpecsBlockFilter
  GuidelinesBlock: PageSpecsBlocksGuidelinesBlockFilter
  CalloutBlock: PageSpecsBlocksCalloutBlockFilter
}

input PageSpecsFilter {
  blocks: PageSpecsBlocksFilter
}

input PageGuidelinesBlocksRichTextBlockFilter {
  title: StringFilter
  content: RichTextFilter
}

input PageGuidelinesBlocksFigmaSyncBlockFilter {
  title: StringFilter
  description: StringFilter
  figmaUrl: StringFilter
  componentName: StringFilter
  showInstructions: BooleanFilter
}

input PageGuidelinesBlocksLiveExampleBlockFilter {
  title: StringFilter
  description: StringFilter
  code: StringFilter
  language: StringFilter
  showPreview: BooleanFilter
  copyable: BooleanFilter
}

input PageGuidelinesBlocksComponentApiBlockPropertiesFilter {
  name: StringFilter
  type: StringFilter
  default: StringFilter
  description: StringFilter
  required: BooleanFilter
}

input PageGuidelinesBlocksComponentApiBlockFilter {
  title: StringFilter
  properties: PageGuidelinesBlocksComponentApiBlockPropertiesFilter
}

input PageGuidelinesBlocksDesignSpecsBlockMeasurementsFilter {
  minHeight: StringFilter
  padding: StringFilter
  margin: StringFilter
  borderRadius: StringFilter
}

input PageGuidelinesBlocksDesignSpecsBlockTokensFilter {
  name: StringFilter
  value: StringFilter
  description: StringFilter
}

input PageGuidelinesBlocksDesignSpecsBlockFilter {
  title: StringFilter
  measurements: PageGuidelinesBlocksDesignSpecsBlockMeasurementsFilter
  tokens: PageGuidelinesBlocksDesignSpecsBlockTokensFilter
}

input PageGuidelinesBlocksGuidelinesBlockDosFilter {
  text: StringFilter
  example: StringFilter
}

input PageGuidelinesBlocksGuidelinesBlockDontsFilter {
  text: StringFilter
  example: StringFilter
}

input PageGuidelinesBlocksGuidelinesBlockFilter {
  title: StringFilter
  dos: PageGuidelinesBlocksGuidelinesBlockDosFilter
  donts: PageGuidelinesBlocksGuidelinesBlockDontsFilter
}

input PageGuidelinesBlocksCalloutBlockFilter {
  type: StringFilter
  title: StringFilter
  content: RichTextFilter
}

input PageGuidelinesBlocksFilter {
  RichTextBlock: PageGuidelinesBlocksRichTextBlockFilter
  FigmaSyncBlock: PageGuidelinesBlocksFigmaSyncBlockFilter
  LiveExampleBlock: PageGuidelinesBlocksLiveExampleBlockFilter
  ComponentApiBlock: PageGuidelinesBlocksComponentApiBlockFilter
  DesignSpecsBlock: PageGuidelinesBlocksDesignSpecsBlockFilter
  GuidelinesBlock: PageGuidelinesBlocksGuidelinesBlockFilter
  CalloutBlock: PageGuidelinesBlocksCalloutBlockFilter
}

input PageGuidelinesFilter {
  blocks: PageGuidelinesBlocksFilter
}

input PageCodeInstallationFilter {
  command: StringFilter
  instructions: RichTextFilter
}

input PageCodeCodeExamplesFilter {
  title: StringFilter
  language: StringFilter
  code: StringFilter
  description: StringFilter
}

input PageCodeApiFilter {
  content: RichTextFilter
}

input PageCodeFilter {
  content: RichTextFilter
  installation: PageCodeInstallationFilter
  codeExamples: PageCodeCodeExamplesFilter
  api: PageCodeApiFilter
}

input PageSeoFilter {
  metaTitle: StringFilter
  metaDescription: StringFilter
  keywords: StringFilter
}

input PageTableOfContentsFilter {
  enabled: BooleanFilter
  maxDepth: NumberFilter
  minDepth: NumberFilter
  sticky: BooleanFilter
}

input PageFilter {
  title: StringFilter
  slug: StringFilter
  section: PageSectionFilter
  category: PageCategoryFilter
  componentGroup: PageComponentGroupFilter
  description: StringFilter
  status: StringFilter
  version: StringFilter
  order: NumberFilter
  enabled: BooleanFilter
  cacheRefresh: StringFilter
  links: PageLinksFilter
  packageInfo: PagePackageInfoFilter
  overview: PageOverviewFilter
  specs: PageSpecsFilter
  guidelines: PageGuidelinesFilter
  code: PageCodeFilter
  seo: PageSeoFilter
  tableOfContents: PageTableOfContentsFilter
  body: RichTextFilter
}

type PageConnectionEdges {
  cursor: String!
  node: Page
}

type PageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PageConnectionEdges]
}

union NavigationHeaderItemsSection = Section

type NavigationHeaderItems {
  section: NavigationHeaderItemsSection
  customLabel: String
  customUrl: String
}

type NavigationHeader {
  items: [NavigationHeaderItems]
}

union NavigationSidebarSection = Section

union NavigationSidebarCategoriesCategory = Category

union NavigationSidebarCategoriesPagesPage = Page

type NavigationSidebarCategoriesPages {
  page: NavigationSidebarCategoriesPagesPage
}

type NavigationSidebarCategories {
  category: NavigationSidebarCategoriesCategory
  pages: [NavigationSidebarCategoriesPages]
}

type NavigationSidebar {
  section: NavigationSidebarSection
  categories: [NavigationSidebarCategories]
}

type Navigation implements Node & Document {
  title: String!
  header: NavigationHeader
  sidebar: [NavigationSidebar]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input NavigationHeaderItemsSectionFilter {
  section: SectionFilter
}

input NavigationHeaderItemsFilter {
  section: NavigationHeaderItemsSectionFilter
  customLabel: StringFilter
  customUrl: StringFilter
}

input NavigationHeaderFilter {
  items: NavigationHeaderItemsFilter
}

input NavigationSidebarSectionFilter {
  section: SectionFilter
}

input NavigationSidebarCategoriesCategoryFilter {
  category: CategoryFilter
}

input NavigationSidebarCategoriesPagesPageFilter {
  page: PageFilter
}

input NavigationSidebarCategoriesPagesFilter {
  page: NavigationSidebarCategoriesPagesPageFilter
}

input NavigationSidebarCategoriesFilter {
  category: NavigationSidebarCategoriesCategoryFilter
  pages: NavigationSidebarCategoriesPagesFilter
}

input NavigationSidebarFilter {
  section: NavigationSidebarSectionFilter
  categories: NavigationSidebarCategoriesFilter
}

input NavigationFilter {
  title: StringFilter
  header: NavigationHeaderFilter
  sidebar: NavigationSidebarFilter
}

type NavigationConnectionEdges {
  cursor: String!
  node: Navigation
}

type NavigationConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [NavigationConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updateSection(relativePath: String!, params: SectionMutation!): Section!
  createSection(relativePath: String!, params: SectionMutation!): Section!
  updateComponentGroup(relativePath: String!, params: ComponentGroupMutation!): ComponentGroup!
  createComponentGroup(relativePath: String!, params: ComponentGroupMutation!): ComponentGroup!
  updateCategory(relativePath: String!, params: CategoryMutation!): Category!
  createCategory(relativePath: String!, params: CategoryMutation!): Category!
  updatePage(relativePath: String!, params: PageMutation!): Page!
  createPage(relativePath: String!, params: PageMutation!): Page!
  updateNavigation(relativePath: String!, params: NavigationMutation!): Navigation!
  createNavigation(relativePath: String!, params: NavigationMutation!): Navigation!
}

input DocumentUpdateMutation {
  section: SectionMutation
  componentGroup: ComponentGroupMutation
  category: CategoryMutation
  page: PageMutation
  navigation: NavigationMutation
  relativePath: String
}

input DocumentMutation {
  section: SectionMutation
  componentGroup: ComponentGroupMutation
  category: CategoryMutation
  page: PageMutation
  navigation: NavigationMutation
}

input SectionLandingPageTabsMutation {
  title: String
  slug: String
  content: JSON
}

input SectionLandingPageMutation {
  overview: JSON
  tabs: [SectionLandingPageTabsMutation]
}

input SectionMutation {
  title: String
  slug: String
  description: String
  order: Float
  enabled: Boolean
  icon: String
  hasLandingPage: Boolean
  landingPage: SectionLandingPageMutation
}

input ComponentGroupMutation {
  title: String
  slug: String
  description: String
  order: Float
  enabled: Boolean
  icon: String
  content: JSON
}

input CategoryMutation {
  title: String
  slug: String
  section: String
  componentGroup: String
  description: String
  order: Float
  enabled: Boolean
  icon: String
  isExpandable: Boolean
  hasLandingPage: Boolean
  landingContent: JSON
}

input PageLinksMutation {
  figmaUrl: String
  storybookUrl: String
  githubUrl: String
  npmUrl: String
}

input PagePackageInfoMutation {
  packageName: String
  importPath: String
  dependencies: String
}

input PageOverviewBlocksRichTextBlockMutation {
  title: String
  content: JSON
}

input PageOverviewBlocksFigmaSyncBlockMutation {
  title: String
  description: String
  figmaUrl: String
  componentName: String
  showInstructions: Boolean
}

input PageOverviewBlocksLiveExampleBlockMutation {
  title: String
  description: String
  code: String
  language: String
  showPreview: Boolean
  copyable: Boolean
}

input PageOverviewBlocksComponentApiBlockPropertiesMutation {
  name: String
  type: String
  default: String
  description: String
  required: Boolean
}

input PageOverviewBlocksComponentApiBlockMutation {
  title: String
  properties: [PageOverviewBlocksComponentApiBlockPropertiesMutation]
}

input PageOverviewBlocksDesignSpecsBlockMeasurementsMutation {
  minHeight: String
  padding: String
  margin: String
  borderRadius: String
}

input PageOverviewBlocksDesignSpecsBlockTokensMutation {
  name: String
  value: String
  description: String
}

input PageOverviewBlocksDesignSpecsBlockMutation {
  title: String
  measurements: PageOverviewBlocksDesignSpecsBlockMeasurementsMutation
  tokens: [PageOverviewBlocksDesignSpecsBlockTokensMutation]
}

input PageOverviewBlocksGuidelinesBlockDosMutation {
  text: String
  example: String
}

input PageOverviewBlocksGuidelinesBlockDontsMutation {
  text: String
  example: String
}

input PageOverviewBlocksGuidelinesBlockMutation {
  title: String
  dos: [PageOverviewBlocksGuidelinesBlockDosMutation]
  donts: [PageOverviewBlocksGuidelinesBlockDontsMutation]
}

input PageOverviewBlocksCalloutBlockMutation {
  type: String
  title: String
  content: JSON
}

input PageOverviewBlocksMutation {
  RichTextBlock: PageOverviewBlocksRichTextBlockMutation
  FigmaSyncBlock: PageOverviewBlocksFigmaSyncBlockMutation
  LiveExampleBlock: PageOverviewBlocksLiveExampleBlockMutation
  ComponentApiBlock: PageOverviewBlocksComponentApiBlockMutation
  DesignSpecsBlock: PageOverviewBlocksDesignSpecsBlockMutation
  GuidelinesBlock: PageOverviewBlocksGuidelinesBlockMutation
  CalloutBlock: PageOverviewBlocksCalloutBlockMutation
}

input PageOverviewMutation {
  blocks: [PageOverviewBlocksMutation]
}

input PageSpecsBlocksRichTextBlockMutation {
  title: String
  content: JSON
}

input PageSpecsBlocksFigmaSyncBlockMutation {
  title: String
  description: String
  figmaUrl: String
  componentName: String
  showInstructions: Boolean
}

input PageSpecsBlocksLiveExampleBlockMutation {
  title: String
  description: String
  code: String
  language: String
  showPreview: Boolean
  copyable: Boolean
}

input PageSpecsBlocksComponentApiBlockPropertiesMutation {
  name: String
  type: String
  default: String
  description: String
  required: Boolean
}

input PageSpecsBlocksComponentApiBlockMutation {
  title: String
  properties: [PageSpecsBlocksComponentApiBlockPropertiesMutation]
}

input PageSpecsBlocksDesignSpecsBlockMeasurementsMutation {
  minHeight: String
  padding: String
  margin: String
  borderRadius: String
}

input PageSpecsBlocksDesignSpecsBlockTokensMutation {
  name: String
  value: String
  description: String
}

input PageSpecsBlocksDesignSpecsBlockMutation {
  title: String
  measurements: PageSpecsBlocksDesignSpecsBlockMeasurementsMutation
  tokens: [PageSpecsBlocksDesignSpecsBlockTokensMutation]
}

input PageSpecsBlocksGuidelinesBlockDosMutation {
  text: String
  example: String
}

input PageSpecsBlocksGuidelinesBlockDontsMutation {
  text: String
  example: String
}

input PageSpecsBlocksGuidelinesBlockMutation {
  title: String
  dos: [PageSpecsBlocksGuidelinesBlockDosMutation]
  donts: [PageSpecsBlocksGuidelinesBlockDontsMutation]
}

input PageSpecsBlocksCalloutBlockMutation {
  type: String
  title: String
  content: JSON
}

input PageSpecsBlocksMutation {
  RichTextBlock: PageSpecsBlocksRichTextBlockMutation
  FigmaSyncBlock: PageSpecsBlocksFigmaSyncBlockMutation
  LiveExampleBlock: PageSpecsBlocksLiveExampleBlockMutation
  ComponentApiBlock: PageSpecsBlocksComponentApiBlockMutation
  DesignSpecsBlock: PageSpecsBlocksDesignSpecsBlockMutation
  GuidelinesBlock: PageSpecsBlocksGuidelinesBlockMutation
  CalloutBlock: PageSpecsBlocksCalloutBlockMutation
}

input PageSpecsMutation {
  blocks: [PageSpecsBlocksMutation]
}

input PageGuidelinesBlocksRichTextBlockMutation {
  title: String
  content: JSON
}

input PageGuidelinesBlocksFigmaSyncBlockMutation {
  title: String
  description: String
  figmaUrl: String
  componentName: String
  showInstructions: Boolean
}

input PageGuidelinesBlocksLiveExampleBlockMutation {
  title: String
  description: String
  code: String
  language: String
  showPreview: Boolean
  copyable: Boolean
}

input PageGuidelinesBlocksComponentApiBlockPropertiesMutation {
  name: String
  type: String
  default: String
  description: String
  required: Boolean
}

input PageGuidelinesBlocksComponentApiBlockMutation {
  title: String
  properties: [PageGuidelinesBlocksComponentApiBlockPropertiesMutation]
}

input PageGuidelinesBlocksDesignSpecsBlockMeasurementsMutation {
  minHeight: String
  padding: String
  margin: String
  borderRadius: String
}

input PageGuidelinesBlocksDesignSpecsBlockTokensMutation {
  name: String
  value: String
  description: String
}

input PageGuidelinesBlocksDesignSpecsBlockMutation {
  title: String
  measurements: PageGuidelinesBlocksDesignSpecsBlockMeasurementsMutation
  tokens: [PageGuidelinesBlocksDesignSpecsBlockTokensMutation]
}

input PageGuidelinesBlocksGuidelinesBlockDosMutation {
  text: String
  example: String
}

input PageGuidelinesBlocksGuidelinesBlockDontsMutation {
  text: String
  example: String
}

input PageGuidelinesBlocksGuidelinesBlockMutation {
  title: String
  dos: [PageGuidelinesBlocksGuidelinesBlockDosMutation]
  donts: [PageGuidelinesBlocksGuidelinesBlockDontsMutation]
}

input PageGuidelinesBlocksCalloutBlockMutation {
  type: String
  title: String
  content: JSON
}

input PageGuidelinesBlocksMutation {
  RichTextBlock: PageGuidelinesBlocksRichTextBlockMutation
  FigmaSyncBlock: PageGuidelinesBlocksFigmaSyncBlockMutation
  LiveExampleBlock: PageGuidelinesBlocksLiveExampleBlockMutation
  ComponentApiBlock: PageGuidelinesBlocksComponentApiBlockMutation
  DesignSpecsBlock: PageGuidelinesBlocksDesignSpecsBlockMutation
  GuidelinesBlock: PageGuidelinesBlocksGuidelinesBlockMutation
  CalloutBlock: PageGuidelinesBlocksCalloutBlockMutation
}

input PageGuidelinesMutation {
  blocks: [PageGuidelinesBlocksMutation]
}

input PageCodeInstallationMutation {
  command: String
  instructions: JSON
}

input PageCodeCodeExamplesMutation {
  title: String
  language: String
  code: String
  description: String
}

input PageCodeApiMutation {
  content: JSON
}

input PageCodeMutation {
  content: JSON
  installation: PageCodeInstallationMutation
  codeExamples: [PageCodeCodeExamplesMutation]
  api: PageCodeApiMutation
}

input PageSeoMutation {
  metaTitle: String
  metaDescription: String
  keywords: String
}

input PageTableOfContentsMutation {
  enabled: Boolean
  maxDepth: Float
  minDepth: Float
  sticky: Boolean
}

input PageMutation {
  title: String
  slug: String
  section: String
  category: String
  componentGroup: String
  description: String
  status: String
  version: String
  order: Float
  enabled: Boolean
  cacheRefresh: String
  links: PageLinksMutation
  packageInfo: PagePackageInfoMutation
  overview: PageOverviewMutation
  specs: PageSpecsMutation
  guidelines: PageGuidelinesMutation
  code: PageCodeMutation
  seo: PageSeoMutation
  tableOfContents: PageTableOfContentsMutation
  body: JSON
}

input NavigationHeaderItemsMutation {
  section: String
  customLabel: String
  customUrl: String
}

input NavigationHeaderMutation {
  items: [NavigationHeaderItemsMutation]
}

input NavigationSidebarCategoriesPagesMutation {
  page: String
}

input NavigationSidebarCategoriesMutation {
  category: String
  pages: [NavigationSidebarCategoriesPagesMutation]
}

input NavigationSidebarMutation {
  section: String
  categories: [NavigationSidebarCategoriesMutation]
}

input NavigationMutation {
  title: String
  header: NavigationHeaderMutation
  sidebar: [NavigationSidebarMutation]
}

schema {
  query: Query
  mutation: Mutation
}
